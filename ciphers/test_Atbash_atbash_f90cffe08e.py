# Test generated by RoostGPT for test sample-python using AI Type Open AI and AI Model gpt-4

"""
1. **Scenario:** Validate if the function correctly translates a sequence of lowercase letters.
   - **Given:** an all lowercase sequence like "abcdefg"
   - **When:** the function is invoked
   - **Then:** the function should return "zyxwvut"

2. **Scenario:** Validate if the function correctly translates a sequence of uppercase letters.
   - **Given:** an all uppercase sequence like "ABCDEFG"
   - **When:** the function is invoked
   - **Then:** the function should return "ZYXWVUT"

3. **Scenario:** Validate if the function correctly translates a sequence of mixed case letters.
   - **Given:** a mixed case sequence like "AbCdEfG"
   - **When:** the function is invoked
   - **Then:** the function should return "ZyXwVuT"

4. **Scenario:** Validate if the function correctly translates a sequence of letters interspersed with non-alphabetic characters.
   - **Given:** a sequence with interspersed non-alphabetic characters like "aW;;123BX"
   - **When:** the function is invoked
   - **Then:** the function should return "zD;;123YC"

5. **Scenario:** Validate if the function correctly handles an empty sequence.
   - **Given:** an empty sequence ""
   - **When:** the function is invoked
   - **Then:** the function should return an empty string ""

6. **Scenario:** Validate if the function correctly handles a sequence only with non-alphabetic characters.
   - **Given:** a sequence only with non-alphabetic characters like "123456;;@@"
   - **When:** the function is invoked
   - **Then:** the function should return the original sequence "123456;;@@" as there are no alphabetic characters to reverse

7. **Scenario:** Validate if the function correctly handles a sequence of letters with whitespaces.
   - **Given:** a sequence with whitespaces like "A B C D E"
   - **When:** the function is invoked
   - **Then:** the function should return "Z Y X W V" preserving the whitespaces

"""
import pytest
from ciphers import atbash

def test_atbash_lowercase():
    # Scenario: Validate if the function correctly translates a sequence of lowercase letters.
    sequence = "abcdefg"
    expected_output = "zyxwvut"
    assert atbash.atbash(sequence) == expected_output

def test_atbash_uppercase():
    # Scenario: Validate if the function correctly translates a sequence of uppercase letters.
    sequence = "ABCDEFG"
    expected_output = "ZYXWVUT"
    assert atbash.atbash(sequence) == expected_output

def test_atbash_mixed_case():
    # Scenario: Validate if the function correctly translates a sequence of mixed case letters.
    sequence = "AbCdEfG"
    expected_output = "ZyXwVuT"
    assert atbash.atbash(sequence) == expected_output

def test_atbash_non_alpha_chars():
    # Scenario: Validate if the function correctly translates a sequence of letters interspersed with non-alphabetic characters.
    sequence = "aW;;123BX"
    expected_output = "zD;;123YC"
    assert atbash.atbash(sequence) == expected_output

def test_atbash_empty_sequence():
    # Scenario: Validate if the function correctly handles an empty sequence.
    sequence = ""
    expected_output = ""
    assert atbash.atbash(sequence) == expected_output

def test_atbash_non_alpha_only():
    # Scenario: Validate if the function correctly handles a sequence only with non-alphabetic characters.
    sequence = "123456;;@@"
    expected_output = "123456;;@@"
    assert atbash.atbash(sequence) == expected_output

def test_atbash_with_whitespaces():
    # Scenario: Validate if the function correctly handles a sequence of letters with whitespaces.
    sequence = "A B C D E"
    expected_output = "Z Y X W V"
    assert atbash.atbash(sequence) == expected_output
