# Test generated by RoostGPT for test python-ciphers using AI Type Open AI and AI Model gpt-4

"""
1. Scenario: Check if the function correctly chunks a sequence into the specified size.
    - Given a sequence of length 10 and a chunk size of 5, the function should return two chunks each of size 5.

2. Scenario: Check if the function correctly handles sequences that aren't evenly divisible by the chunk size.
    - Given a sequence of length 9 and a chunk size of 4, the function should return two chunks, one of size 4 and one of size 5.

3. Scenario: Check if the function correctly handles an empty sequence.
    - Given an empty sequence, the function should return no chunks.

4. Scenario: Check if the function correctly handles a sequence that is shorter than the chunk size.
    - Given a sequence of length 3 and a chunk size of 5, the function should return one chunk of size 3.

5. Scenario: Check if the function correctly handles a chunk size of 1.
    - Given a sequence of length 10 and a chunk size of 1, the function should return 10 chunks each of size 1.

6. Scenario: Check if the function correctly handles a chunk size of 0.
    - Given a sequence of length 10 and a chunk size of 0, the function should raise an exception or return an error message.

7. Scenario: Check if the function correctly handles a chunk size that is larger than the sequence.
    - Given a sequence of length 5 and a chunk size of 10, the function should return one chunk of size 5.

8. Scenario: Check if the function maintains the order of elements in the sequence.
    - Given a sequence of ['a', 'b', 'c', 'd', 'e'] and a chunk size of 2, the function should return chunks in the order ['a', 'b'], ['c', 'd'], ['e'].

9. Scenario: Check if the function works correctly with different types of sequences (lists, tuples, strings, etc.).
    - Given a string sequence of "abcdef" and a chunk size of 3, the function should return chunks in the order "abc", "def".

10. Scenario: Check if the function correctly handles a sequence containing duplicate elements.
    - Given a sequence of ['a', 'a', 'b', 'b', 'c', 'c'] and a chunk size of 2, the function should return chunks in the order ['a', 'a'], ['b', 'b'], ['c', 'c'].
"""
import pytest
from playfair_cipher import chunker

def test_chunker_even_division():
    sequence = list(range(10))
    chunks = list(chunker(sequence, 5))
    assert len(chunks) == 2
    assert all(len(chunk) == 5 for chunk in chunks)

def test_chunker_uneven_division():
    sequence = list(range(9))
    chunks = list(chunker(sequence, 4))
    assert len(chunks) == 3
    assert len(chunks[0]) == 4
    assert len(chunks[1]) == 4
    assert len(chunks[2]) == 1

def test_chunker_empty_sequence():
    sequence = []
    chunks = list(chunker(sequence, 5))
    assert len(chunks) == 0

def test_chunker_short_sequence():
    sequence = list(range(3))
    chunks = list(chunker(sequence, 5))
    assert len(chunks) == 1
    assert len(chunks[0]) == 3

def test_chunker_chunk_size_one():
    sequence = list(range(10))
    chunks = list(chunker(sequence, 1))
    assert len(chunks) == 10
    assert all(len(chunk) == 1 for chunk in chunks)

def test_chunker_chunk_size_zero():
    sequence = list(range(10))
    with pytest.raises(ValueError):
        list(chunker(sequence, 0))

def test_chunker_large_chunk_size():
    sequence = list(range(5))
    chunks = list(chunker(sequence, 10))
    assert len(chunks) == 1
    assert len(chunks[0]) == 5

def test_chunker_maintains_order():
    sequence = ['a', 'b', 'c', 'd', 'e']
    chunks = list(chunker(sequence, 2))
    assert chunks == [('a', 'b'), ('c', 'd'), ('e',)]

def test_chunker_different_sequence_types():
    sequence = "abcdef"
    chunks = list(chunker(sequence, 3))
    assert chunks == [('a', 'b', 'c'), ('d', 'e', 'f')]

def test_chunker_duplicate_elements():
    sequence = ['a', 'a', 'b', 'b', 'c', 'c']
    chunks = list(chunker(sequence, 2))
    assert chunks == [('a', 'a'), ('b', 'b'), ('c', 'c')]
