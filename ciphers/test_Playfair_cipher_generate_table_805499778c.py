# Test generated by RoostGPT for test python-ciphers using AI Type Open AI and AI Model gpt-4

"""
1. Scenario: Key is an empty string
    - Given: The function is provided with an empty string as a key
    - When: The function attempts to generate a table
    - Then: The function should return a table filled with the alphabet in its original order

2. Scenario: Key consists of all unique letters
    - Given: The function is provided with a key that contains all unique letters
    - When: The function attempts to generate a table
    - Then: The function should return a table that begins with the letters from the key, in the order they appear, followed by the remaining letters of the alphabet

3. Scenario: Key consists of duplicate letters
    - Given: The function is provided with a key that contains duplicate letters
    - When: The function attempts to generate a table
    - Then: The function should ignore duplicates and return a table that begins with the unique letters from the key, in the order they first appear, followed by the remaining letters of the alphabet

4. Scenario: Key contains letters not in the alphabet
    - Given: The function is provided with a key that contains letters not in the alphabet
    - When: The function attempts to generate a table
    - Then: The function should ignore these letters and return a table that begins with the valid letters from the key, in the order they appear, followed by the remaining letters of the alphabet

5. Scenario: Key contains mixed case letters
    - Given: The function is provided with a key that contains both upper and lower case letters
    - When: The function attempts to generate a table
    - Then: The function should treat all letters as their uppercase equivalents and return a table that begins with the unique uppercase letters from the key, in the order they first appear, followed by the remaining letters of the alphabet

6. Scenario: Key is a single letter
    - Given: The function is provided with a key that is a single letter
    - When: The function attempts to generate a table
    - Then: The function should return a table that begins with this letter, followed by the remaining letters of the alphabet

7. Scenario: Key contains the letter 'J'
    - Given: The function is provided with a key that contains the letter 'J'
    - When: The function attempts to generate a table
    - Then: The function should treat 'J' as 'I' and return a table that begins with the unique letters from the key, in the order they first appear, followed by the remaining letters of the alphabet
"""
import pytest
from playfair_cipher import generate_table

def test_generate_table_empty_key():
    key = ""
    expected_table = list("ABCDEFGHIKLMNOPQRSTUVWXYZ")
    assert generate_table(key) == expected_table

def test_generate_table_unique_letters():
    key = "QWERTY"
    expected_table = list("QWERTYABCDGHIKLMNOPFSUVXZ")
    assert generate_table(key) == expected_table

def test_generate_table_duplicate_letters():
    key = "HELLO"
    expected_table = list("HELOABCDGFIKMNPQRSTUVWXYZ")
    assert generate_table(key) == expected_table

def test_generate_table_non_alphabet_letters():
    key = "ABC123"
    expected_table = list("ABCDEFGHIKLMNOPQRSTUVWXYZ")
    assert generate_table(key) == expected_table

def test_generate_table_mixed_case_letters():
    key = "AbCdEf"
    expected_table = list("ABCDEFHIKLMNOPQRSTUVWXYZ")
    assert generate_table(key) == expected_table

def test_generate_table_single_letter():
    key = "Z"
    expected_table = list("ZABCDEFGHIKLMNOPQRSTUVWXY")
    assert generate_table(key) == expected_table

def test_generate_table_letter_j():
    key = "JACK"
    expected_table = list("IACKBDEFGHLMNOPQRSTUVWXYZ")
    assert generate_table(key) == expected_table
