# Test generated by RoostGPT for test aa using AI Type Open AI and AI Model gpt-4

"""
Scenario 1: Valid Conversion
- Given the pressure_conversion function
- When I input a valid pressure value and valid 'from_type' and 'to_type' parameters (e.g., 4, "atm", "pascal")
- Then I should get the correct pressure conversion (e.g., 405300)

Scenario 2: Conversion Between Same Units
- Given the pressure_conversion function
- When I input a valid pressure value and the same 'from_type' and 'to_type' parameters (e.g., 5, "atm", "atm")
- Then I should get the same pressure value as the input (e.g., 5)

Scenario 3: Negative Pressure Value
- Given the pressure_conversion function
- When I input a negative pressure value and valid 'from_type' and 'to_type' parameters (e.g., -2, "bar", "atm")
- Then I should get the correct negative pressure conversion (e.g., -1.973846)

Scenario 4: Invalid 'from_type' Parameter
- Given the pressure_conversion function
- When I input a valid pressure value and an invalid 'from_type' parameter (e.g., 4, "wrongUnit", "atm")
- Then I should get a ValueError with an appropriate error message

Scenario 5: Invalid 'to_type' Parameter
- Given the pressure_conversion function
- When I input a valid pressure value and an invalid 'to_type' parameter (e.g., 4, "atm", "wrongUnit")
- Then I should get a ValueError with an appropriate error message

Scenario 6: Null Pressure Value
- Given the pressure_conversion function
- When I input a null pressure value and valid 'from_type' and 'to_type' parameters (e.g., None, "atm", "pascal")
- Then I should get a TypeError with an appropriate error message

Scenario 7: Zero Pressure Value
- Given the pressure_conversion function
- When I input a zero pressure value and valid 'from_type' and 'to_type' parameters (e.g., 0, "atm", "pascal")
- Then I should get a zero as the converted pressure value

Scenario 8: Conversion From and To the Same Unit
- Given the pressure_conversion function
- When I input a valid pressure value and the 'from_type' and 'to_type' parameters are the same (e.g., 1, "pascal", "pascal")
- Then I should get the same pressure value as the input (e.g., 1)
"""
import pytest
import pressure_conversions

def test_valid_conversion():
    assert pressure_conversions.pressure_conversion(4, "atm", "pascal") == 405300
    
def test_conversion_between_same_units():
    assert pressure_conversions.pressure_conversion(5, "atm", "atm") == 5

def test_negative_pressure_value():
    assert pressure_conversions.pressure_conversion(-2, "bar", "atm") == -1.973846

def test_invalid_from_type_parameter():
    with pytest.raises(ValueError) as excinfo:
        pressure_conversions.pressure_conversion(4, "wrongUnit", "atm")
    assert str(excinfo.value) == "Invalid 'from_type' value: 'wrongUnit'  Supported values are:\natm, pascal, bar, kilopascal, megapascal, psi, inHg, torr"

def test_invalid_to_type_parameter():
    with pytest.raises(ValueError) as excinfo:
        pressure_conversions.pressure_conversion(4, "atm", "wrongUnit")
    assert str(excinfo.value) == "Invalid 'to_type' value: 'wrongUnit'.  Supported values are:\natm, pascal, bar, kilopascal, megapascal, psi, inHg, torr"

def test_null_pressure_value():
    with pytest.raises(TypeError) as excinfo:
        pressure_conversions.pressure_conversion(None, "atm", "pascal")
    assert str(excinfo.value) == "unsupported operand type(s) for *: 'NoneType' and 'float'"

def test_zero_pressure_value():
    assert pressure_conversions.pressure_conversion(0, "atm", "pascal") == 0

def test_conversion_from_and_to_same_unit():
    assert pressure_conversions.pressure_conversion(1, "pascal", "pascal") == 1
