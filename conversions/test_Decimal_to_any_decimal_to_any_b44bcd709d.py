# Test generated by RoostGPT for test aa using AI Type Open AI and AI Model gpt-4

"""
Test Scenario 1: Test when the number is 0 and base is 2. We should return '0'.

Test Scenario 2: Test when the number is 5 and base is 4. We should return '11'.

Test Scenario 3: Test when the number is 20 and base is 3. We should return '202'.

Test Scenario 4: Test when the number is 58 and base is 16. We should return '3A'.

Test Scenario 5: Test when the number is 243 and base is 17. We should return 'E5'.

Test Scenario 6: Test when the number is 34923 and base is 36. We should return 'QY3'.

Test Scenario 7: Test when the number is 10 and base is 11. We should return 'A'.

Test Scenario 8: Test when the number is 16 and base is 16. We should return '10'.

Test Scenario 9: Test when the number is 36 and base is 36. We should return '10'.

Test Scenario 10: Test when the number is negative. We should return an error stating "parameter must be positive int".

Test Scenario 11: Test when the number is a float. We should return an error stating "int() can't convert non-string with explicit base".

Test Scenario 12: Test when the base is a float. We should return an error stating "'float' object cannot be interpreted as an integer".

Test Scenario 13: Test when the base is a string. We should return an error stating "'str' object cannot be interpreted as an integer".

Test Scenario 14: Test when the base is less than 2. We should return an error stating "base must be >= 2".

Test Scenario 15: Test when the base is greater than 36. We should return an error stating "base must be <= 36".
"""
import pytest
from conversions.decimal_to_any import decimal_to_any

def test_decimal_to_any_scenario1():
    assert decimal_to_any(0, 2) == '0'

def test_decimal_to_any_scenario2():
    assert decimal_to_any(5, 4) == '11'

def test_decimal_to_any_scenario3():
    assert decimal_to_any(20, 3) == '202'

def test_decimal_to_any_scenario4():
    assert decimal_to_any(58, 16) == '3A'

def test_decimal_to_any_scenario5():
    assert decimal_to_any(243, 17) == 'E5'

def test_decimal_to_any_scenario6():
    assert decimal_to_any(34923, 36) == 'QY3'

def test_decimal_to_any_scenario7():
    assert decimal_to_any(10, 11) == 'A'

def test_decimal_to_any_scenario8():
    assert decimal_to_any(16, 16) == '10'

def test_decimal_to_any_scenario9():
    assert decimal_to_any(36, 36) == '10'

def test_decimal_to_any_scenario10():
    with pytest.raises(ValueError) as excinfo:
        decimal_to_any(-45, 8)
    assert str(excinfo.value) == 'parameter must be positive int'

def test_decimal_to_any_scenario11():
    with pytest.raises(TypeError) as excinfo:
        decimal_to_any(34.4, 6)
    assert str(excinfo.value) == "int() can't convert non-string with explicit base"

def test_decimal_to_any_scenario12():
    with pytest.raises(TypeError) as excinfo:
        decimal_to_any(5, 2.5)
    assert str(excinfo.value) == "'float' object cannot be interpreted as an integer"

def test_decimal_to_any_scenario13():
    with pytest.raises(TypeError) as excinfo:
        decimal_to_any(10, '16')
    assert str(excinfo.value) == "'str' object cannot be interpreted as an integer"

def test_decimal_to_any_scenario14():
    with pytest.raises(ValueError) as excinfo:
        decimal_to_any(7, 0)
    assert str(excinfo.value) == 'base must be >= 2'

def test_decimal_to_any_scenario15():
    with pytest.raises(ValueError) as excinfo:
        decimal_to_any(34, 37)
    assert str(excinfo.value) == 'base must be <= 36'
