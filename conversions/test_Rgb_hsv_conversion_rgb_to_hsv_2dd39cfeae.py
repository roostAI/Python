# Test generated by RoostGPT for test aa using AI Type Open AI and AI Model gpt-4

"""
Test Scenario 1: Test with minimum input values
- Input: (0,0,0)
- Expected output: [0,0,0]

Test Scenario 2: Test with maximum input values
- Input: (255,255,255)
- Expected output: [0,0,1]

Test Scenario 3: Test with red color only
- Input: (255,0,0)
- Expected output: [0,1,1]

Test Scenario 4: Test with green color only
- Input: (0,255,0)
- Expected output: [120,1,1]

Test Scenario 5: Test with blue color only
- Input: (0,0,255)
- Expected output: [240,1,1]

Test Scenario 6: Test with red and blue color only
- Input: (255,0,255)
- Expected output: [300,1,1]

Test Scenario 7: Test with red and green color only
- Input: (255,255,0)
- Expected output: [60,1,1]

Test Scenario 8: Test with green and blue color only
- Input: (0,255,255)
- Expected output: [180,1,1]

Test Scenario 9: Test with a random combination of RGB values
- Input: (64,128,128)
- Expected output: [180,0.5,0.5]

Test Scenario 10: Test with a random combination of RGB values
- Input: (193,196,224)
- Expected output: [234,0.14,0.88]

Test Scenario 11: Test with values outside the acceptable range
- Input: (300, 0, 0)
- Expected output: Exception with message "red should be between 0 and 255"

Test Scenario 12: Test with negative values
- Input: (-50, 0, 0)
- Expected output: Exception with message "red should be between 0 and 255"
"""
import pytest
import rgb_hsv_conversion

def test_rgb_to_hsv():
    # Test Scenario 1: Test with minimum input values
    assert rgb_hsv_conversion.rgb_to_hsv(0, 0, 0) == [0, 0, 0]

    # Test Scenario 2: Test with maximum input values
    assert rgb_hsv_conversion.rgb_to_hsv(255, 255, 255) == [0, 0, 1]

    # Test Scenario 3: Test with red color only
    assert rgb_hsv_conversion.rgb_to_hsv(255, 0, 0) == [0, 1, 1]

    # Test Scenario 4: Test with green color only
    assert rgb_hsv_conversion.rgb_to_hsv(0, 255, 0) == [120, 1, 1]

    # Test Scenario 5: Test with blue color only
    assert rgb_hsv_conversion.rgb_to_hsv(0, 0, 255) == [240, 1, 1]

    # Test Scenario 6: Test with red and blue color only
    assert rgb_hsv_conversion.rgb_to_hsv(255, 0, 255) == [300, 1, 1]

    # Test Scenario 7: Test with red and green color only
    assert rgb_hsv_conversion.rgb_to_hsv(255, 255, 0) == [60, 1, 1]

    # Test Scenario 8: Test with green and blue color only
    assert rgb_hsv_conversion.rgb_to_hsv(0, 255, 255) == [180, 1, 1]

    # Test Scenario 9: Test with a random combination of RGB values
    assert rgb_hsv_conversion.rgb_to_hsv(64, 128, 128) == [180, 0.5, 0.5]

    # Test Scenario 10: Test with a random combination of RGB values
    assert rgb_hsv_conversion.rgb_to_hsv(193, 196, 224) == [234, 0.14, 0.88]

    # Test Scenario 11: Test with values outside the acceptable range
    with pytest.raises(Exception) as e_info:
        rgb_hsv_conversion.rgb_to_hsv(300, 0, 0)
    assert str(e_info.value) == "red should be between 0 and 255"

    # Test Scenario 12: Test with negative values
    with pytest.raises(Exception) as e_info:
        rgb_hsv_conversion.rgb_to_hsv(-50, 0, 0)
    assert str(e_info.value) == "red should be between 0 and 255"
