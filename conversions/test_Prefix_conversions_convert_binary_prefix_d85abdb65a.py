# Test generated by RoostGPT for test aa using AI Type Open AI and AI Model gpt-4

"""
Test Scenario 1: Conversion from smaller to larger unit
Given a known amount in a smaller binary unit (e.g., kilo), when it is converted to a larger binary unit (e.g., mega), then the function should return a smaller number. 

Test Scenario 2: Conversion from larger to smaller unit
Given a known amount in a larger binary unit (e.g., giga), when it is converted to a smaller binary unit (e.g., kilo), then the function should return a larger number.

Test Scenario 3: Conversion from the same unit to the same unit
Given a known amount in a certain binary unit (e.g., kilo), when it is converted to the same binary unit, then the function should return the same number.

Test Scenario 4: Conversion with case-insensitive prefixes
Given a known amount in a certain binary unit with a prefix in various cases (e.g., 'gIGa'), when it is converted to another binary unit with a prefix in different cases (e.g., 'mEGa'), then the function should return the correct conversion result.

Test Scenario 5: Conversion with invalid prefixes
Given a known amount in a certain binary unit with an invalid prefix (e.g., 'fake'), when the function is called, then it should throw an error or exception.

Test Scenario 6: Conversion with negative known amount
Given a negative known amount in a certain binary unit (e.g., -1 kilo), when it is converted to another binary unit, then the function should return a negative number.

Test Scenario 7: Conversion with zero known amount
Given a zero known amount in a certain binary unit, when it is converted to another binary unit, then the function should return zero.
"""
import pytest
import prefix_conversions
from prefix_conversions import BinaryUnit

def test_convert_binary_prefix_smaller_to_larger():
    result = prefix_conversions.convert_binary_prefix(1, BinaryUnit.kilo, BinaryUnit.mega)
    assert pytest.approx(0.0009765625, 0.00001) == result

def test_convert_binary_prefix_larger_to_smaller():
    result = prefix_conversions.convert_binary_prefix(1, BinaryUnit.giga, BinaryUnit.kilo)
    assert pytest.approx(1048576, 0.00001) == result

def test_convert_binary_prefix_same_to_same():
    result = prefix_conversions.convert_binary_prefix(1, BinaryUnit.kilo, BinaryUnit.kilo)
    assert 1 == result

def test_convert_binary_prefix_case_insensitive():
    result = prefix_conversions.convert_binary_prefix(1, 'gIGa', 'mEGa')
    assert pytest.approx(1048576, 0.00001) == result

def test_convert_binary_prefix_invalid_prefix():
    with pytest.raises(KeyError):
        prefix_conversions.convert_binary_prefix(1, 'fake', BinaryUnit.mega)

def test_convert_binary_prefix_negative_amount():
    result = prefix_conversions.convert_binary_prefix(-1, BinaryUnit.kilo, BinaryUnit.mega)
    assert pytest.approx(-0.0009765625, 0.00001) == result

def test_convert_binary_prefix_zero_amount():
    result = prefix_conversions.convert_binary_prefix(0, BinaryUnit.kilo, BinaryUnit.mega)
    assert 0 == result
