# Test generated by RoostGPT for test aa using AI Type Open AI and AI Model gpt-4

"""
Test Scenarios:

1. Valid Input Test:
    - Scenario: Given the input is a valid decimal number, the output should be the octal equivalent of that number.
    - Input: 2
    - Expected Output: 2

2. Zero Input Test:
    - Scenario: Given the input is zero, the output should also be zero as zero in any number system is zero.
    - Input: 0
    - Expected Output: 0

3. Large Number Input Test:
    - Scenario: Given the input is a large decimal number, the function should be able to handle it and provide the correct octal equivalent.
    - Input: 512
    - Expected Output: 1000

4. Single Digit Number Test:
    - Scenario: Given the input is a single digit decimal number, the output should be the octal equivalent of that number.
    - Input: 8
    - Expected Output: 10

5. Two Digit Number Test:
    - Scenario: Given the input is a two digit decimal number, the output should be the octal equivalent of that number.
    - Input: 65
    - Expected Output: 101

6. Three Digit Number Test:
    - Scenario: Given the input is a three digit decimal number, the output should be the octal equivalent of that number.
    - Input: 216
    - Expected Output: 330

7. Negative Number Test:
    - Scenario: Given the input is a negative decimal number, the function should be able to handle it and provide the correct octal equivalent.
    - Input: -5
    - Expected Output: -5

Note: The octal system does not have negative numbers, so the function should either return an error or simply return the negative of the octal equivalent of the absolute value of the input.
"""
import pytest
import decimal_to_octal

def test_valid_input():
    assert decimal_to_octal.decimal_to_octal(2) == '0o2'

def test_zero_input():
    assert decimal_to_octal.decimal_to_octal(0) == '0o0'

def test_large_number_input():
    assert decimal_to_octal.decimal_to_octal(512) == '0o1000'

def test_single_digit_number():
    assert decimal_to_octal.decimal_to_octal(8) == '0o10'

def test_two_digit_number():
    assert decimal_to_octal.decimal_to_octal(65) == '0o101'

def test_three_digit_number():
    assert decimal_to_octal.decimal_to_octal(216) == '0o330'

def test_negative_number():
    with pytest.raises(ValueError):
        decimal_to_octal.decimal_to_octal(-5)
